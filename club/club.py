"""
Created on Sat Sep 12 2020

File defining a generic Club, and a method selecting the appropriate subclass for a given sport

A club is an entity competing in sport. Clubs can compete in various sports (sometime the same clubs compete in
different sports at high level).

The aim here is to provide a generic Club class, that can be used to define a club no matter the sport played.
The club's data will then be used by the competition managers to simulate matches between Clubs and ultimately
give the competition's results.

The aim here is that this class is generic, providing only the basic information all clubs share no matter their sport
To add support for a new sport in FHS, just add a relevant class defining a club for this sport. Naming pattern
should be name of the sport+Club

Since adding a new class requires modifying the competition manager to load the correct class, this file also
provides a method which uses the club's init paramters and a string to initialize the correct Club subclass:
the string tells the method which sport is being simulated (and so which Club subclass should be used).
This method should be modified in case support for a new sport (and so a corresponding Club subclass) is added,
so the correct Club subclass is loaded

@author: alexa
"""

from club.football_club import FootballClub


class Club:
    """
            Defines a generic sport Club. All methods (including the constructor) described here should be defined by
            your subclass while respecting these specifications since the competition managers will use them.

            Attributes
            ----------
            name : str
                        The club's name
            nationality : str
                        Where the club is from
            tier : int
                        The club's tier
            players : list of Player
                        The list of the club's players
            pot : int
                        The club's pot (used for the draw in some competitions, leave to 0 if not used)
            nbWin : int
                        Number of matches won by the club
            nbDrawn : int
                        Number of matches drawn by the club
            nbLosses : int
                        Number of matches lost by the club
            backUps : list of dict
                        A list of dictionaries used to back up some stats (namely, the aforementioned ones plus any
                        stats specific to your Club subclass relevant to the sport simulated)
            matchList : list of Result
                        The Club's results in the competition being simulated

            Methods
            -------
            export_to_xml : str -> None
                        Writes the team's data to an XML file, path given in attribute
            increase_won : int -> None
                        Increases nbWin by the quantity given in attribute
            increase_drawn : int -> None
                        Increases nbDrawn by the quantity given in attribute
            increase_losses : int -> None
                        Increases nbLosses by the quantity given in attribute
            reset_matches_data : None -> None
                        Resets the nbWin, nbDrawn, nbLosses attributes to 0
            back_up_stats : None -> None
                        Saves the current stats in the back-up list of dicts
            restore_last_backup : None -> None
                        Resets the stats to their value in the latest back-up dict
            get_pot : None -> Int
                        Returns the Team's pot
            get_tier : None -> Int
                        Returns the Team's tier
            app_result : Result -> None
                        Adds a Result to the matchList
            + a method to pick a Team for a match
    """

    def __init__(self, club_data=None):
        """
           Initializes a club from an XML file. Clubs aren't supposed to be initialized by anything else than an XML
           file generated by the Club creation tools

           Parameters
           ----------
           club_data : str
                       The path towards the club data file to be loaded

           Returns
           -------
           Club
                The initialized Club
        """
        # init by loading the file
        pass


class Bye(Club):
    """
            Defines a dummy club called a bye.
            Used in those cases where there's an odd number of teams in a round so a team doesn't play.
            Since it's a dummy team it doesn't need attributes
    """

    def __init__(self, club_data=None):
        self.name = "bye"


def choose_correct_club(sport, club_data):
    """
       Club is a generic class not intended to be used, instead subclasses implementing Club for a particular sport
       should be used
       The issue is then to load the proper Club subclass corresponding to the proper sport
       This method gives an easy way to do this by using a string to select the correct Club subclass for a sport

       DON'T FORGET TO MODIFIY THIS IF YOU ADD A NEW CLUB SUBCLASS

       Parameters
       ----------
       sport : str
                    The sport which will be used
       club_data : str
                   The path towards the club data file to be loaded

       Returns
       -------
       Club
            The initialized Club, of the Club subclass corresponding to the sport specified in parameter
    """
    correct_club = None
    if sport == "foot":
        correct_club = FootballClub(club_data)
    else:
        print("The chosen sport has no supported Club !")  # EXCEPTION !!!!!
    return correct_club
